openapi: 3.0.2
info:
  title: ""
  version: ""

servers:
  - url: "http://localhost:8080"
    description: "Servidor local"
  - url: "https://agendados-backend-842309366027.europe-southwest1.run.app"
    description: "Servidor producción"

components:
  securitySchemes:
    TokenAuth:
      type: apiKey
      in: header
      name: Authorization
      description: "Usa el token en el formato: Token <tu_token>"

security:
  - TokenAuth: []

paths:
  /api/events/:
    get:
      operationId: listget_all_events
      description: ""
      parameters: []
      responses:
        "200":
          content:
            application/json:
              schema:
                type: array
                items: {}
          description: ""
      tags:
        - events
  /api/events/recommended:
    get:
      operationId: listget_recommended_events
      description: ""
      parameters:
        - name: limit
          in: query
          required: false
          description: "Número máximo de eventos a devolver (por defecto 50)"
          schema:
            type: integer
            example: 50
      responses:
        "200":
          content:
            application/json:
              schema:
                type: array
                items: {}
          description: ""
      tags:
        - events
  /api/events/categories:
    get:
      operationId: listget_all_categories
      description: ""
      parameters: []
      responses:
        "200":
          content:
            application/json:
              schema:
                type: array
                items: {}
          description: ""
      tags:
        - events
  /api/events/{event_id}:
    get:
      operationId: retrieveget_event_details
      description: ""
      parameters:
        - name: event_id
          in: path
          required: true
          description: ""
          schema:
            type: string
      responses:
        "200":
          content:
            application/json:
              schema: {}
          description: ""
      tags:
        - events
  /api/events/favorites:
    get:
      operationId: listget_user_favorites
      description: ""
      parameters: []
      responses:
        "200":
          content:
            application/json:
              schema:
                type: array
                items: {}
          description: ""
      tags:
        - events
  /api/events/discarded:
    get:
      operationId: listget_user_discardeds
      description: ""
      parameters: []
      responses:
        "200":
          content:
            application/json:
              schema:
                type: array
                items: {}
          description: ""
      tags:
        - events
  /api/locations/:
    get:
      operationId: listget_all_locations
      description: ""
      parameters: []
      responses:
        "200":
          content:
            application/json:
              schema:
                type: array
                items: {}
          description: ""
      tags:
        - locations
  /api/locations/regions:
    get:
      operationId: listget_all_regions
      description: ""
      parameters: []
      responses:
        "200":
          content:
            application/json:
              schema:
                type: array
                items: {}
          description: ""
      tags:
        - locations
  /api/locations/towns:
    get:
      operationId: listget_all_towns
      description: ""
      parameters: []
      responses:
        "200":
          content:
            application/json:
              schema:
                type: array
                items: {}
          description: ""
      tags:
        - locations
  /api/users/login:
    post:
      operationId: createlogin
      description: "Authenticate a user and return a token."
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                username:
                  type: string
                  example: "johndoe"
                password:
                  type: string
                  format: password
                  example: "mypassword123"
              required:
                - username
                - password
      responses:
        201:
          description: "Login successful"
          content:
            application/json:
              schema:
                type: object
                properties:
                  token:
                    type: string
                    example: "abc123token"
                  user:
                    type: object
                    properties:
                      id:
                        type: integer
                      username:
                        type: string
                      email:
                        type: string
                required:
                  - token
                  - user
        400:
          description: "Invalid credentials"
          content:
            application/json:
              schema:
                type: object
                properties:
                  detail:
                    type: string
                    example: "Invalid credentials"
      tags:
        - users
  /api/users/signup:
    post:
      operationId: createsignup
      description: "Crea un nuevo usuario y genera un token de autenticación."
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                username:
                  type: string
                  example: "johndoe"
                email:
                  type: string
                  format: email
                  example: "johndoe@example.com"
                password:
                  type: string
                  format: password
                  example: "mypassword123"
              required:
                - username
                - email
                - password
      responses:
        "201":
          description: "Usuario creado exitosamente y token generado."
          content:
            application/json:
              schema:
                type: object
                properties:
                  token:
                    type: string
                    example: "abc123token"
                  user:
                    type: object
                    properties:
                      id:
                        type: integer
                      username:
                        type: string
                      email:
                        type: string
                required:
                  - token
                  - user
        "400":
          description: "Datos inválidos para crear el usuario."
          content:
            application/json:
              schema:
                type: object
                properties:
                  detail:
                    type: string
                    example: "Error al crear el usuario, los datos no son válidos."
      tags:
        - users
  /api/users/update-password:
    post:
      operationId: update_password
      description: "Actualiza la contraseña del usuario autenticado."
      security:
        - TokenAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                current_password:
                  type: string
                  format: password
                  example: "contraseñaActual123"
                  description: "Contraseña actual del usuario"
                new_password:
                  type: string
                  format: password
                  example: "nuevaContraseña456"
                  description: "Nueva contraseña para el usuario (mínimo 8 caracteres)"
              required:
                - current_password
                - new_password
      responses:
        "200":
          description: "Contraseña actualizada correctamente"
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Contraseña actualizada correctamente"
        "400":
          description: "Error en la actualización de la contraseña"
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    example: "La contraseña actual es incorrecta o la nueva contraseña no cumple los requisitos"
        "401":
          description: "No autorizado - Token de autenticación inválido o no proporcionado"
      tags:
        - users
  /api/users/forgot-password:
    post:
      operationId: create_forgot_password
      description: "Envía un correo electrónico con un enlace para restablecer la contraseña del usuario"
      tags:
        - users
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                email:
                  type: string
                  format: email
                  example: "johndoe@example.com"
              required:
                - email
      responses:
        "200":
          description: "Correo enviado si el email está registrado. Siempre devuelve 200 por seguridad"
          content:
            application/json:
              schema:
                type: object
                properties:
                  detail:
                    type: string
                    example: "Si el correo existe, enviamos instrucciones para restablecer la contraseña."
        "400":
          description: "Falta el campo de correo electrónico"
          content:
            application/json:
              schema:
                type: object
                properties:
                  detail:
                    type: string
                    example: "El campo email es obligatorio."
  /api/users/test:
    post:
      operationId: createtest
      description: ""
      parameters: []
      requestBody:
        content:
          application/json:
            schema: {}
          application/x-www-form-urlencoded:
            schema: {}
          multipart/form-data:
            schema: {}
      responses:
        "201":
          content:
            application/json:
              schema: {}
          description: ""
      tags:
        - users
  /api/events/{event_id}/favorites:
    post:
      operationId: createadd_or_remove_favorites
      description: ""
      parameters:
        - name: event_id
          in: path
          required: true
          description: ""
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema: {}
          application/x-www-form-urlencoded:
            schema: {}
          multipart/form-data:
            schema: {}
      responses:
        "201":
          content:
            application/json:
              schema: {}
          description: ""
      tags:
        - events
    delete:
      operationId: destroyadd_or_remove_favorites
      description: ""
      parameters:
        - name: event_id
          in: path
          required: true
          description: ""
          schema:
            type: string
      responses:
        "204":
          description: ""
      tags:
        - events
  /api/events/{event_id}/discarded:
    post:
      operationId: createadd_or_remove_discarded
      description: ""
      parameters:
        - name: event_id
          in: path
          required: true
          description: ""
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema: {}
          application/x-www-form-urlencoded:
            schema: {}
          multipart/form-data:
            schema: {}
      responses:
        "201":
          content:
            application/json:
              schema: {}
          description: ""
      tags:
        - events
    delete:
      operationId: destroyadd_or_remove_discarded
      description: ""
      parameters:
        - name: event_id
          in: path
          required: true
          description: ""
          schema:
            type: string
      responses:
        "204":
          description: ""
      tags:
        - events

  /api/users/friendships:
    get:
      operationId: listget_friendships
      description: "Obtiene todas las amistades del usuario autenticado"
      parameters: []
      responses:
        "200":
          content:
            application/json:
              schema:
                type: array
                items:
                  type: object
                  properties:
                    id:
                      type: integer
                    username:
                      type: string
                    email:
                      type: string
          description: "Lista de amigos del usuario"
      security:
        - TokenAuth: []
      tags:
        - users

  /api/users/friendships/{user_id}:
    post:
      operationId: send_friend_request
      description: "Envía una solicitud de amistad a otro usuario"
      parameters:
        - name: user_id
          in: path
          required: true
          description: "ID del usuario al que se enviará la solicitud"
          schema:
            type: integer
      responses:
        "201":
          description: "Solicitud enviada con éxito o amistad creada automáticamente"
        "400":
          description: "Error al enviar la solicitud (mismo usuario, ya son amigos o solicitud ya existente)"
      security:
        - TokenAuth: []
      tags:
        - users

  /api/users/friendships/accept/{request_id}:
    post:
      operationId: accept_friend_request
      description: "Acepta una solicitud de amistad pendiente"
      parameters:
        - name: request_id
          in: path
          required: true
          description: "ID de la solicitud de amistad a aceptar"
          schema:
            type: integer
      responses:
        "201":
          description: "Solicitud aceptada y amistad creada con éxito"
        "404":
          description: "Solicitud no encontrada o no dirigida al usuario actual"
      security:
        - TokenAuth: []
      tags:
        - users

  /api/users/friendships/decline/{request_id}:
    delete:
      operationId: decline_friend_request
      description: "Rechaza una solicitud de amistad pendiente"
      parameters:
        - name: request_id
          in: path
          required: true
          description: "ID de la solicitud de amistad a rechazar"
          schema:
            type: integer
      responses:
        "200":
          description: "Solicitud rechazada con éxito"
        "404":
          description: "Solicitud no encontrada o no dirigida al usuario actual"
      security:
        - TokenAuth: []
      tags:
        - users

  /api/users/:
    get:
      tags:
        - users
      description: |
        Permite buscar usuarios utilizando un parámetro de consulta.
        Si no se proporciona un parámetro de búsqueda o está vacío, devuelve todos los usuarios.
        El usuario autenticado siempre es excluido de los resultados.
      parameters:
        - name: query
          in: query
          description: Término de búsqueda para filtrar usuarios (busca en username, first_name, last_name, email)
          required: false
          schema:
            type: string
      security:
        - TokenAuth: []
      responses:
        "200":
          description: Operación exitosa
          content:
            application/json:
              schema:
                type: array
                items:
                  type: object
                  properties:
                    id:
                      type: integer
                    username:
                      type: string
                    first_name:
                      type: string
                    last_name:
                      type: string
                    email:
                      type: string
                      format: email
        "401":
          description: No autorizado - Token de autenticación inválido o no proporcionado

  /api/users/friendships/pending:
    get:
      operationId: get_pending_friend_requests
      description: "Obtiene todas las solicitudes de amistad pendientes dirigidas al usuario autenticado"
      parameters: []
      responses:
        "200":
          content:
            application/json:
              schema:
                type: array
                items:
                  type: object
                  properties:
                    id:
                      type: integer
                    user_from:
                      type: object
                      properties:
                        id:
                          type: integer
                        username:
                          type: string
                        email:
                          type: string
                    user_to:
                      type: object
                      properties:
                        id:
                          type: integer
                        username:
                          type: string
                        email:
                          type: string
                    created_at:
                      type: string
                      format: date-time
          description: "Lista de solicitudes de amistad pendientes"
      security:
        - TokenAuth: []
      tags:
        - users

  /api/eventsInArea:
    get:
      operationId: get_events_in_area
      description: "Obtiene eventos dentro de un área geográfica especificada por coordenadas"
      parameters:
        - name: lat_min
          in: query
          required: true
          description: "Latitud mínima del área"
          schema:
            type: number
            format: float
            example: 41.395
        - name: lat_max
          in: query
          required: true
          description: "Latitud máxima del área"
          schema:
            type: number
            format: float
            example: 41.412
        - name: lon_min
          in: query
          required: true
          description: "Longitud mínima del área"
          schema:
            type: number
            format: float
            example: 2.145
        - name: lon_max
          in: query
          required: true
          description: "Longitud máxima del área"
          schema:
            type: number
            format: float
            example: 2.165
      responses:
        "200":
          content:
            application/json:
              schema:
                type: array
                items: {}
          description: "Lista de eventos dentro del área especificada"
        "400":
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
              examples:
                missing_parameters:
                  value:
                    error: "Missing required parameters"
                invalid_format:
                  value:
                    error: "Coordinate parameters must be valid numbers"
          description: "Error en los parámetros de la solicitud"
      tags:
        - external-service

  /api/events/{event_id}/share:
    get:
      operationId: retrievegenerate_share_link
      description: "Genera un enlace compartible para un evento específico"
      parameters:
        - name: event_id
          in: path
          required: true
          description: "ID del evento para el cual se generará el enlace"
          schema:
            type: integer
      responses:
        "200":
          content:
            application/json:
              schema:
                type: object
                properties:
                  id:
                    type: integer
                    example: 123
                  title:
                    type: string
                    example: "Festival de Música"
                  share_link:
                    type: string
                    example: "agendados://event/123"
          description: "Enlace compartible generado exitosamente"
        "404":
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    example: "Evento no encontrado"
          description: "Evento no encontrado"
      security:
        - TokenAuth: []
      tags:
        - events

  /api/chat/events_where_user_messaged:
    get:
      operationId: get_events_by_user_has_messaged
      description: Retorna una lista de eventos en los cuales el usuario autenticado ha participado enviando al menos un mensaje.
      tags:
        - chats
      security:
        - TokenAuth: []
      responses:
        "200":
          description: Lista de eventos recuperada exitosamente
          content:
            application/json:
              schema:
                type: array
                items: {}
        "401":
          description: No autorizado - Token de autenticación inválido o ausente
        "403":
          description: Prohibido - El usuario no tiene permiso para acceder a estos datos
        "500":
          description: Error interno del servidor

  /api/users/auth/google/:
    post:
      operationId: google_auth
      description: "Autenticar usuario con Google y retornar token de API"
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                idToken:
                  type: string
                  description: "ID Token obtenido de Google OAuth"
              required:
                - idToken
      responses:
        "200":
          description: "Autenticación exitosa"
          content:
            application/json:
              schema:
                type: object
                properties:
                  token:
                    type: string
                    example: "abc123token"
                  user:
                    type: object
                    properties:
                      id:
                        type: integer
                      username:
                        type: string
                      email:
                        type: string
        "400":
          description: "Token no proporcionado"
        "401":
          description: "Token inválido"
        "500":
          description: "Error de servidor"
      tags:
        - users
