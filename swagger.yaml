openapi: 3.0.2
info:
  title: ''
  version: ''

servers:
  - url: "http://localhost:8000"
    description: "Servidor local"

components:
  securitySchemes:
    TokenAuth:
      type: apiKey
      in: header
      name: Authorization
      description: "Usa el token en el formato: Token <tu_token>"

security:
  - TokenAuth: []

paths:
  /api/events/:
    get:
      operationId: listget_all_events
      description: ''
      parameters: []
      responses:
        '200':
          content:
            application/json:
              schema:
                type: array
                items: {}
          description: ''
      tags:
      - events
  /api/events/recommended:
    get:
      operationId: listget_recommended_events
      description: ''
      parameters:
        - name: limit
          in: query
          required: false
          description: "Número máximo de eventos a devolver (por defecto 50)"
          schema:
            type: integer
            example: 50
      responses:
        '200':
          content:
            application/json:
              schema:
                type: array
                items: { }
          description: ''
      tags:
        - events
  /api/events/categories:
    get:
      operationId: listget_all_categories
      description: ''
      parameters: []
      responses:
        '200':
          content:
            application/json:
              schema:
                type: array
                items: {}
          description: ''
      tags:
      - events
  /api/events/{event_id}:
    get:
      operationId: retrieveget_event_details
      description: ''
      parameters:
      - name: event_id
        in: path
        required: true
        description: ''
        schema:
          type: string
      responses:
        '200':
          content:
            application/json:
              schema: {}
          description: ''
      tags:
      - events
  /api/events/favorites:
    get:
      operationId: listget_user_favorites
      description: ''
      parameters: []
      responses:
        '200':
          content:
            application/json:
              schema:
                type: array
                items: {}
          description: ''
      tags:
      - events
  /api/events/discarded:
    get:
      operationId: listget_user_discardeds
      description: ''
      parameters: []
      responses:
        '200':
          content:
            application/json:
              schema:
                type: array
                items: {}
          description: ''
      tags:
      - events
  /api/locations/:
    get:
      operationId: listget_all_locations
      description: ''
      parameters: []
      responses:
        '200':
          content:
            application/json:
              schema:
                type: array
                items: {}
          description: ''
      tags:
      - locations
  /api/locations/regions:
    get:
      operationId: listget_all_regions
      description: ''
      parameters: []
      responses:
        '200':
          content:
            application/json:
              schema:
                type: array
                items: {}
          description: ''
      tags:
      - locations
  /api/locations/towns:
    get:
      operationId: listget_all_towns
      description: ''
      parameters: []
      responses:
        '200':
          content:
            application/json:
              schema:
                type: array
                items: {}
          description: ''
      tags:
      - locations
  /api/users/login:
    post:
      operationId: createlogin
      description: "Authenticate a user and return a token."
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                username:
                  type: string
                  example: "johndoe"
                password:
                  type: string
                  format: password
                  example: "mypassword123"
              required:
                - username
                - password
      responses:
        201:
          description: "Login successful"
          content:
            application/json:
              schema:
                type: object
                properties:
                  token:
                    type: string
                    example: "abc123token"
                  user:
                    type: object
                    properties:
                      id:
                        type: integer
                      username:
                        type: string
                      email:
                        type: string
                required:
                  - token
                  - user
        400:
          description: "Invalid credentials"
          content:
            application/json:
              schema:
                type: object
                properties:
                  detail:
                    type: string
                    example: "Invalid credentials"
      tags:
      - users
  /api/users/signup:
    post:
      operationId: createsignup
      description: "Crea un nuevo usuario y genera un token de autenticación."
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                username:
                  type: string
                  example: "johndoe"
                email:
                  type: string
                  format: email
                  example: "johndoe@example.com"
                password:
                  type: string
                  format: password
                  example: "mypassword123"
              required:
                - username
                - email
                - password
      responses:
        '201':
          description: "Usuario creado exitosamente y token generado."
          content:
            application/json:
              schema:
                type: object
                properties:
                  token:
                    type: string
                    example: "abc123token"
                  user:
                    type: object
                    properties:
                      id:
                        type: integer
                      username:
                        type: string
                      email:
                        type: string
                required:
                  - token
                  - user
        '400':
          description: "Datos inválidos para crear el usuario."
          content:
            application/json:
              schema:
                type: object
                properties:
                  detail:
                    type: string
                    example: "Error al crear el usuario, los datos no son válidos."
      tags:
        - users
  /api/users/test:
    post:
      operationId: createtest
      description: ''
      parameters: []
      requestBody:
        content:
          application/json:
            schema: {}
          application/x-www-form-urlencoded:
            schema: {}
          multipart/form-data:
            schema: {}
      responses:
        '201':
          content:
            application/json:
              schema: {}
          description: ''
      tags:
      - users
  /api/events/{event_id}/favorites:
    post:
      operationId: createadd_or_remove_favorites
      description: ''
      parameters:
      - name: event_id
        in: path
        required: true
        description: ''
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema: {}
          application/x-www-form-urlencoded:
            schema: {}
          multipart/form-data:
            schema: {}
      responses:
        '201':
          content:
            application/json:
              schema: {}
          description: ''
      tags:
      - events
    delete:
      operationId: destroyadd_or_remove_favorites
      description: ''
      parameters:
      - name: event_id
        in: path
        required: true
        description: ''
        schema:
          type: string
      responses:
        '204':
          description: ''
      tags:
      - events
  /api/events/{event_id}/discarded:
    post:
      operationId: createadd_or_remove_discarded
      description: ''
      parameters:
      - name: event_id
        in: path
        required: true
        description: ''
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema: {}
          application/x-www-form-urlencoded:
            schema: {}
          multipart/form-data:
            schema: {}
      responses:
        '201':
          content:
            application/json:
              schema: {}
          description: ''
      tags:
      - events
    delete:
      operationId: destroyadd_or_remove_discarded
      description: ''
      parameters:
      - name: event_id
        in: path
        required: true
        description: ''
        schema:
          type: string
      responses:
        '204':
          description: ''
      tags:
      - events

  /api/users/friendships:
    get:
      operationId: listget_friendships
      description: 'Obtiene todas las amistades del usuario autenticado'
      parameters: []
      responses:
        '200':
          content:
            application/json:
              schema:
                type: array
                items:
                  type: object
                  properties:
                    id:
                      type: integer
                    username:
                      type: string
                    email:
                      type: string
          description: 'Lista de amigos del usuario'
      security:
        - TokenAuth: []
      tags:
        - users

  /api/users/friendships/{user_id}:
    post:
      operationId: send_friend_request
      description: 'Envía una solicitud de amistad a otro usuario'
      parameters:
        - name: user_id
          in: path
          required: true
          description: 'ID del usuario al que se enviará la solicitud'
          schema:
            type: integer
      responses:
        '201':
          description: 'Solicitud enviada con éxito o amistad creada automáticamente'
        '400':
          description: 'Error al enviar la solicitud (mismo usuario, ya son amigos o solicitud ya existente)'
      security:
        - TokenAuth: []
      tags:
        - users

  /api/users/friendships/accept/{request_id}:
    post:
      operationId: accept_friend_request
      description: 'Acepta una solicitud de amistad pendiente'
      parameters:
        - name: request_id
          in: path
          required: true
          description: 'ID de la solicitud de amistad a aceptar'
          schema:
            type: integer
      responses:
        '201':
          description: 'Solicitud aceptada y amistad creada con éxito'
        '404':
          description: 'Solicitud no encontrada o no dirigida al usuario actual'
      security:
        - TokenAuth: []
      tags:
        - users

  /api/users/friendships/decline/{request_id}:
    delete:
      operationId: decline_friend_request
      description: 'Rechaza una solicitud de amistad pendiente'
      parameters:
        - name: request_id
          in: path
          required: true
          description: 'ID de la solicitud de amistad a rechazar'
          schema:
            type: integer
      responses:
        '200':
          description: 'Solicitud rechazada con éxito'
        '404':
          description: 'Solicitud no encontrada o no dirigida al usuario actual'
      security:
        - TokenAuth: []
      tags:
        - users